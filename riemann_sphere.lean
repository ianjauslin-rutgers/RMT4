-- import analysis.complex.basic
-- import geometry.manifold.charted_space
-- import geometry.manifold.smooth_manifold_with_corners
-- import linear_algebra.projective_space.basic
-- import topology.constructions

-- noncomputable theory

-- open_locale manifold

-- variables (K V : Type*) [field K] [add_comm_group V] [module K V]

-- namespace projectivization

-- /- General lemmas about projectivization (for mathlib) -/

-- instance [topological_space V] : topological_space (‚Ñô K V) := quotient.topological_space

-- @[simp] lemma quotient_mk_eq_mk (z : V) (h : z ‚â† 0) :
--   @quotient.mk _ (projectivization_setoid _ _) ‚ü®z, h‚ü© = mk K z h := rfl

-- def lift_on {K V Œ± : Type*} [field K] [add_comm_group V] [module K V]
--   (z : ‚Ñô K V) (f : {w : V // w ‚â† 0} ‚Üí Œ±)
--   (hf : ‚àÄ (x y : V) (hx : x ‚â† 0) (hy : y ‚â† 0), mk K x hx = mk K y hy ‚Üí f ‚ü®x,hx‚ü© = f ‚ü®y,hy‚ü©) : Œ± :=
-- quotient.lift_on' z f (Œª ‚ü®x, hx‚ü© ‚ü®y, hy‚ü© h, hf x y hx hy (quotient.eq'.mpr h))

-- @[simp] lemma lift_on_mk {Œ± : Type*} {z : V} (h : z ‚â† 0) (f : {w : V // w ‚â† 0} ‚Üí Œ±) (hf) :
--   lift_on (mk K z h) f hf = f ‚ü®z, h‚ü© := rfl

-- @[simp] lemma lift_on_mk' {Œ± : Type*} {z : V} (h : z ‚â† 0) (f : {w : V // w ‚â† 0} ‚Üí Œ±) (hf) :
--   quotient.lift_on' (mk K z h) f hf = f ‚ü®z, h‚ü© := rfl

-- /- Specific case of the projective line -/

-- local notation `[`x`:`y`, `h`]` := (mk _ (x,y) h)
-- local notation `[`x`:`y`]` := [x:y, by simp]

-- lemma mk_eq_mk_iff_mul_eq_mul ‚¶Éx y : K √ó K‚¶Ñ (hx : x ‚â† 0) (hy : y ‚â† 0) :
--   mk K x hx = mk K y hy ‚Üî x.1 * y.2 = x.2 * y.1 :=
-- begin
--   rw [mk_eq_mk_iff],
--   split,
--   { rintro ‚ü®a, rfl‚ü©,
--     simp [units.smul_def, mul_assoc, mul_comm y.1 _] },
--   { intro hxy,
--     rcases x with ‚ü®x1, x2‚ü©,
--     rcases y with ‚ü®y1, y2‚ü©,
--     rcases eq_or_ne y1 0 with (rfl | h),
--     { simp only [ne.def, prod.mk_eq_zero, eq_self_iff_true, true_and] at hy,
--       simp only [hy, mul_zero, mul_eq_zero, or_false] at hxy,
--       simp only [hxy, ne.def, prod.mk_eq_zero, eq_self_iff_true, true_and] at hx,
--       use units.mk0 (x2/y2) (div_ne_zero hx hy),
--       simp [units.smul_def, hy, hxy] },
--     { rcases eq_or_ne x1 0 with (rfl | h'),
--       { simp only [ne.def, prod.mk_eq_zero, eq_self_iff_true, true_and] at hx,
--         simp only [hx, h, zero_mul, zero_eq_mul, false_or] at hxy,
--         contradiction },
--       { use units.mk0 (x1/y1) (div_ne_zero h' h),
--         simp [div_mul_cancel, h, div_mul_eq_mul_div, div_eq_iff, hxy] } } }
-- end

-- def lift_of_div {Œ± K : Type*} [field K] (f : K ‚Üí Œ±) (z : ‚Ñô K (K √ó K)) : Œ± :=
-- lift_on z (Œª w, f (w.val.1 / w.val.2))
-- begin
--   intros x y hx hy hxy,
--   obtain ‚ü®a, rfl‚ü© := (mk_eq_mk_iff _ _ _ _ _).mp hxy,
--   exact congr_arg f (mul_div_mul_left y.1 y.2 a.ne_zero)
-- end

-- instance [topological_space K] [t1_space K] [has_continuous_sub K] [has_continuous_mul K] :
--   t1_space (‚Ñô K (K √ó K)) :=
-- begin
--   refine ‚ü®Œª x, _‚ü©,
--   induction x using projectivization.ind with x hx,
--   have hc : continuous (Œª z : {w : K √ó K // w ‚â† 0}, z.val.1 * x.2 - z.val.2 * x.1) :=
--     ((continuous_fst.comp continuous_induced_dom).mul continuous_const).sub
--     ((continuous_snd.comp continuous_induced_dom).mul continuous_const),
--   apply is_open_compl_iff.mp,
--   change is_open {z | ¬¨ mk' K z = mk K x hx},
--   simp_rw [mk'_eq_mk, mk_eq_mk_iff_mul_eq_mul],
--   convert ‚Üê is_open_compl_singleton.preimage hc,
--   ext,
--   exact sub_ne_zero
-- end

-- @[continuity] lemma continuous_lift_of_div {K Œ± : Type*} [field K]
--   [topological_space K] [t1_space K] [has_continuous_inv‚ÇÄ K] [has_continuous_mul K]
--   [topological_space Œ±] {f : K ‚Üí Œ±} (hf : continuous f) :
--   continuous_on (lift_of_div f) {[1:0]}·∂ú :=
-- begin
--   rw continuous_on_iff,
--   intros z hz t ht hzt,
--   refine ‚ü®lift_of_div f ‚Åª¬π' t ‚à© {[1:0]}·∂ú, _, ‚ü®hzt, hz‚ü©, by simp [set.inter_assoc, set.inter_subset_left]‚ü©,
--   refine ‚ü®{z | z.2 ‚â† 0 ‚àß f (z.1 / z.2) ‚àà t}, _, _‚ü©,
--   { suffices : continuous_on (Œª z : K √ó K, f (z.1 / z.2)) {z | z.2 ‚â† 0},
--       exact this.preimage_open_of_open (is_open_compl_singleton.preimage continuous_snd) ht,
--     refine continuous.comp_continuous_on hf _,
--     exact continuous_fst.continuous_on.div continuous_snd.continuous_on (Œª _, id) },
--   { ext ‚ü®x, hx‚ü©,
--     simp [lift_of_div, mk_eq_mk_iff_mul_eq_mul, and_comm, eq_comm] }
-- end

-- /- Specific sub-case of the Riemann sphere -/

-- abbreviation C'2 := {z : ‚ÑÇ √ó ‚ÑÇ // z ‚â† 0}
-- abbreviation CP1 := ‚Ñô ‚ÑÇ (‚ÑÇ √ó ‚ÑÇ)

-- /- Chart constructions -/

-- def main_chart [topological_space K] [t1_space K] [has_continuous_sub K] [has_continuous_mul K]
--   [has_continuous_inv‚ÇÄ K] :
--   local_homeomorph (‚Ñô K (K √ó K)) K :=
-- {
--   to_fun := lift_of_div id,
--   inv_fun := Œª z, mk K (z,1) (by simp),
--   source := {mk K (1,0) (by simp)}·∂ú,
--   target := set.univ,

--   map_source' := Œª _ _, set.mem_univ _,
--   map_target' := by simp [mk_eq_mk_iff_mul_eq_mul],
--   left_inv' := Œª z hz, by {
--     induction z using projectivization.ind with z h,
--     simp [mk_eq_mk_iff_mul_eq_mul, ‚Üê ne.def] at hz,
--     simp [lift_of_div, mk_eq_mk_iff_mul_eq_mul, hz.symm] },
--   right_inv' := by simp [lift_of_div],
--   open_source := is_open_compl_singleton,
--   open_target := is_open_univ,
--   continuous_to_fun := continuous_lift_of_div continuous_id,
--   continuous_inv_fun :=
--     (continuous_quotient_mk.comp ((continuous.prod.mk_left 1).subtype_mk _)).continuous_on
-- }

-- lemma _root_.prod.swap_eq_iff_eq_swap {Œ± : Type*} {z z' : Œ± √ó Œ±} : z.swap = z' ‚Üî z = z'.swap :=
-- ‚ü®Œª h, prod.swap_swap z ‚ñ∏ congr_arg prod.swap h, Œª h, prod.swap_swap z' ‚ñ∏ congr_arg prod.swap h‚ü©

-- def antipode [topological_space K] : ‚Ñô K (K √ó K) ‚âÉ‚Çú ‚Ñô K (K √ó K) :=
-- let antip : ‚Ñô K (K √ó K) ‚Üí ‚Ñô K (K √ó K) := Œª z, lift_on z
--   (Œª w, mk K w.val.swap (by simp [w.prop, prod.swap_eq_iff_eq_swap]))
--   (by simp [mk_eq_mk_iff_mul_eq_mul, eq_comm]) in
-- have inv : function.involutive antip := Œª z, by {
--   induction z using projectivization.ind with z h,
--   simp [antip] },
-- have cts : continuous antip := (continuous_quotient_mk.comp ((continuous_swap.comp
--   continuous_subtype_val).subtype_mk _)).quotient_lift_on' _,
-- {
--   to_fun := antip,
--   inv_fun := antip,
--   left_inv := inv,
--   right_inv := inv,
--   continuous_to_fun := cts,
--   continuous_inv_fun := cts
-- }

-- def other_chart [topological_space K] [t1_space K] [has_continuous_sub K] [has_continuous_mul K]
--   [has_continuous_inv‚ÇÄ K] :
--   local_homeomorph (‚Ñô K (K √ó K)) K :=
-- (antipode K).to_local_homeomorph ‚â´‚Çï main_chart K

-- /- The Riemann sphere -/

-- instance : charted_space ‚ÑÇ CP1 :=
-- {
--   atlas := {œÜ | œÜ = main_chart ‚ÑÇ ‚à® œÜ = other_chart ‚ÑÇ},
--   chart_at := Œª z, by { by_cases z = [1:0], exact other_chart ‚ÑÇ, exact main_chart ‚ÑÇ },
--   mem_chart_source := Œª z, by {
--     by_cases z = [1:0]; simp [h, antipode, mk_eq_mk_iff_mul_eq_mul, main_chart, other_chart] },
--   chart_mem_atlas := Œª z, by { by_cases z = [1:0]; simp [h] }
-- }

-- /- Manifold instance -/

-- @[simp] lemma dom1 : (main_chart ‚ÑÇ).target ‚à© (main_chart ‚ÑÇ).symm ‚Åª¬π' (other_chart ‚ÑÇ).source = {0}·∂ú :=
-- begin
--   ext,
--   simp [antipode, mk_eq_mk_iff_mul_eq_mul, eq_comm, main_chart, other_chart],
-- end

-- @[simp] lemma dom2 : (other_chart ‚ÑÇ).target ‚à© (other_chart ‚ÑÇ).symm ‚Åª¬π' (main_chart ‚ÑÇ).source = {0}·∂ú :=
-- begin
--   ext,
--   simp [antipode, mk_eq_mk_iff_mul_eq_mul, eq_comm, main_chart, other_chart],
-- end

-- instance : smooth_manifold_with_corners ùìò(‚ÑÇ) CP1 :=
-- smooth_manifold_with_corners_of_cont_diff_on ùìò(‚ÑÇ) CP1
-- begin
--   simp,
--   rintro e e' (rfl|rfl) (rfl|rfl),
--   { simp [cont_diff_on_id.congr, lift_of_div, main_chart, other_chart] },
--   { exact dom1.symm ‚ñ∏ (cont_diff_on_inv ‚ÑÇ).congr (by simp [antipode, lift_of_div, main_chart, other_chart]) },
--   { exact dom2.symm ‚ñ∏ (cont_diff_on_inv ‚ÑÇ).congr (by simp [antipode, lift_of_div, main_chart, other_chart]) },
--   { simp [cont_diff_on_id.congr, lift_of_div, main_chart, other_chart] }
-- end

-- end projectivization
