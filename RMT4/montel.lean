import Mathlib.Analysis.Complex.Liouville
-- import topology.continuous_function.bounded
-- import topology.uniform_space.uniform_convergence_topology
import RMT4.defs
import RMT4.hurwitz
import RMT4.ascoli

open Set Function Metric UniformConvergence Complex

-- open complex set metric filter RMT bounded_continuous_function function
-- open_locale bounded_continuous_function uniform_convergence topological_space uniformity filter

def compacts (U : Set ‚ÑÇ) : Set (Set ‚ÑÇ) := {K | K ‚äÜ U ‚àß IsCompact K}

variable {F : Œπ ‚Üí ‚ÑÇ ‚Üí·µ§[compacts U] ‚ÑÇ}
-- variables {Œπ : Type*} {U K : set ‚ÑÇ}  {z : ‚ÑÇ}

@[simp] lemma union_compacts : ‚ãÉ‚ÇÄ compacts U = U :=
  subset_antisymm (Œª _ ‚ü®_, hK, hz‚ü© => hK.1 hz)
    (Œª z hz => ‚ü®{z}, ‚ü®singleton_subset_iff.2 hz, isCompact_singleton‚ü©, mem_singleton z‚ü©)

def UniformlyBoundedOn (F : Œπ ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (U : Set ‚ÑÇ) : Prop :=
  ‚àÄ K ‚àà compacts U, ‚àÉ M > 0, ‚àÄ z ‚àà K, range (eval z ‚àò F) ‚äÜ closedBall 0 M

lemma UniformlyBoundedOn.totally_bounded_at (h1 : UniformlyBoundedOn F U) (hz : z ‚àà U) :
    TotallyBounded (range (Œª (i : Œπ) => F i z)) := by
  obtain ‚ü®M, _, hM‚ü© := h1 {z} ‚ü®singleton_subset_iff.2 hz, isCompact_singleton‚ü©
  have := hM z (mem_singleton z)
  exact totallyBounded_subset this (isCompact_closedBall 0 M).totallyBounded

lemma UniformlyBoundedOn.deriv (h1 : UniformlyBoundedOn F U) (hU : IsOpen U)
    (h2 : ‚àÄ i, DifferentiableOn ‚ÑÇ (F i) U) :
    UniformlyBoundedOn (deriv ‚àò F) U := by
  rintro K ‚ü®hK1, hK2‚ü©
  obtain ‚ü®Œ¥, hŒ¥, h‚ü© := hK2.exists_cthickening_subset_open hU hK1
  have e1 : cthickening Œ¥ K ‚àà compacts U :=
    ‚ü®h, isCompact_of_isClosed_bounded isClosed_cthickening hK2.bounded.cthickening‚ü©
  obtain ‚ü®M, hMp, hM‚ü© := h1 _ e1
  refine ‚ü®M / Œ¥, div_pos hMp hŒ¥, ?_‚ü©
  rintro z‚ÇÄ hz‚ÇÄ w ‚ü®i, rfl‚ü©
  simp only [mem_closedBall_zero_iff]
  refine norm_deriv_le_aux hŒ¥ ?_ ?_
  { exact (h2 i).diffContOnCl_ball ((closedBall_subset_cthickening hz‚ÇÄ Œ¥).trans h) }
  { rintro z hz
    have : z ‚àà cthickening Œ¥ K :=
      sphere_subset_closedBall.trans (closedBall_subset_cthickening hz‚ÇÄ Œ¥) hz
    simpa using hM z this ‚ü®i, rfl‚ü© }

-- lemma UniformlyBoundedOn.equicontinuous_on
--   (h1 : UniformlyBoundedOn F U)
--   (hU : IsOpen U)
--   (h2 : ‚àÄ (i : Œπ), DifferentiableOn ‚ÑÇ (F i) U)
--   (hK : K ‚àà compacts U) :
--   equicontinuous (Œª i, K.restrict (F i)) :=
-- begin
--   have key := h1.deriv hU h2,
--   rintro ‚ü®z, hz‚ü©,
--   obtain ‚ü®Œ¥, hŒ¥, h‚ü© := nhds_basis_closed_ball.mem_iff.1 (hU.mem_nhds (hK.1 hz)),
--   obtain ‚ü®M, hMp, hM‚ü© := key (closed_ball z Œ¥) ‚ü®h, is_compact_closed_ball _ _‚ü©,
--   rw [equicontinuous_at_iff],
--   rintro Œµ hŒµ,
--   refine ‚ü®Œ¥ ‚äì Œµ / M, gt_iff_lt.2 (lt_inf_iff.2 ‚ü®hŒ¥, div_pos hŒµ hMp‚ü©), Œª w hw i, _‚ü©,
--   simp,
--   have e1 : ‚àÄ x ‚àà closed_ball z Œ¥, differentiable_at ‚ÑÇ (F i) x,
--     from Œª x hx, (h2 i).differentiable_at (hU.mem_nhds (h hx)),
--   have e2 : ‚àÄ x ‚àà closed_ball z Œ¥, ‚Äñderiv (F i) x‚Äñ ‚â§ M,
--     from Œª x hx, by simpa using hM x hx ‚ü®i, rfl‚ü©,
--   have e3 : z ‚àà closed_ball z Œ¥ := mem_closed_ball_self hŒ¥.le,
--   have e4 : w.1 ‚àà closed_ball z Œ¥ := by simpa using (lt_inf_iff.1 hw).1.le,
--   rw [dist_eq_norm],
--   refine ((convex_closed_ball _ _).norm_image_sub_le_of_norm_deriv_le e1 e2 e4 e3).trans_lt _,
--   have : ‚Äñz - w.val‚Äñ < Œµ / M,
--   { have := (lt_inf_iff.1 hw).2,
--     rwa [dist_comm, subtype.dist_eq, dist_eq_norm] at this },
--   convert mul_lt_mul' le_rfl this (norm_nonneg _) hMp,
--   field_simp [hMp.lt.ne.symm, mul_comm]
-- end

-- theorem montel (hU : IsOpen U) (h1 : UniformlyBoundedOn F U)
--   (h2 : ‚àÄ i, DifferentiableOn ‚ÑÇ (F i) U) :
--   totally_bounded (range F) :=
-- begin
--   refine ascoli (Œª K hK, hK.2) _ (by simpa using Œª z, h1.totally_bounded_at),
--   exact Œª K hK, h1.equicontinuous_on hU h2 hK
-- end

-- lemma bound_on_deriv {f : ‚ÑÇ ‚Üí ‚ÑÇ} {r : ‚Ñù} {z‚ÇÄ : ‚ÑÇ} (hf : DifferentiableOn ‚ÑÇ f U) (hr : 0 < r)
--   (hfr : maps_to f (ball z‚ÇÄ r) ùîª) (hrU : closed_ball z‚ÇÄ r ‚äÜ U) :
--   ‚Äñderiv f z‚ÇÄ‚Äñ ‚â§ 1 / r :=
-- begin
--   have e1 : DifferentiableOn ‚ÑÇ f (closure (ball z‚ÇÄ r)),
--   from hf.mono ((closure_ball z‚ÇÄ hr.ne.symm).symm ‚ñ∏hrU),
--   have e4 : maps_to f (closed_ball z‚ÇÄ r) (closed_ball 0 1),
--   { simp only [‚Üê closure_ball z‚ÇÄ hr.ne.symm, ‚Üê closure_ball (0 : ‚ÑÇ) one_ne_zero] at hrU ‚ä¢,
--     exact hfr.closure_of_continuous_on e1.continuous_on },
--   refine norm_deriv_le_aux hr e1.diff_cont_on_cl (Œª z hz, _),
--   simpa using e4 (sphere_subset_closed_ball hz)
-- end
