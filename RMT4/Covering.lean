import Mathlib
import RMT4.pintegral
import RMT4.LocallyConstant

open Topology Filter Metric TopologicalSpace Set

variable {U : Set ‚ÑÇ}

def holo_covering (_ : HasLocalPrimitiveOn U f) := U √ó ‚ÑÇ

def LocalPrimitiveOn.map‚ÇÄ (Œõ : LocalPrimitiveOn U f) (z : U) (v : ‚ÑÇ) : ‚ÑÇ ‚Üí ‚ÑÇ :=
  Œª w => v + (Œõ.F z w - Œõ.F z z)

lemma LocalPrimitiveOn.der‚ÇÄ (Œõ : LocalPrimitiveOn U f) (z : U) (v w : ‚ÑÇ) (hw : w ‚àà Œõ.S z) :
    HasDerivAt (Œõ.map‚ÇÄ z v) (f w) w := by
  simp [map‚ÇÄ]
  have l1 : HasDerivAt (Œª _ => v) 0 w := hasDerivAt_const _ _
  have l2 : HasDerivAt (Œª w => Œõ.F z w) (f w) w := Œõ.der z w hw
  have l3 : HasDerivAt (Œª _ => Œõ.F z z) 0 w := hasDerivAt_const _ _
  convert HasDerivAt.add l1 (l2.sub l3) using 1 ; simp

def LocalPrimitiveOn.map (Œõ : LocalPrimitiveOn U f) (z : U) (v : ‚ÑÇ) : U ‚Üí holo_covering ‚ü®Œõ‚ü© :=
  Œª w => (w, Œõ.map‚ÇÄ z v w)

namespace holo_covering

def nhd (Œõ : LocalPrimitiveOn U f) (z : holo_covering ‚ü®Œõ‚ü©) : Filter (holo_covering ‚ü®Œõ‚ü©) :=
  Filter.map (Œõ.map z.1 z.2) (ùìù z.1)

instance : TopologicalSpace (holo_covering h) := TopologicalSpace.mkOfNhds (nhd h.some)

lemma mem_nhd (Œõ : LocalPrimitiveOn U f) (z : holo_covering ‚ü®Œõ‚ü©) (s : Set (holo_covering ‚ü®Œõ‚ü©)) :
    s ‚àà nhd Œõ z ‚Üî ‚àÉ t ‚àà ùìù z.1, Œõ.map z.1 z.2 '' t ‚äÜ s := by
  rw [nhd, mem_map_iff_exists_image]

lemma mem_nhd' (Œõ : LocalPrimitiveOn U f) (z : holo_covering ‚ü®Œõ‚ü©) (s : Set (holo_covering ‚ü®Œõ‚ü©)) :
    s ‚àà nhd Œõ z ‚Üî ‚àÄ·∂† w in ùìù z.1, Œõ.map z.1 z.2 w ‚àà s := by
    simp only [eventually_iff, nhd] ; rfl

lemma mem_nhd'' (Œõ : LocalPrimitiveOn U f) (z : holo_covering ‚ü®Œõ‚ü©) (s : Set (holo_covering ‚ü®Œõ‚ü©))
    (h : s ‚àà nhd Œõ z) : ‚àÉ t ‚àà ùìù z.1, (Subtype.val '' t ‚äÜ Œõ.S z.1) ‚àß Œõ.map z.1 z.2 '' t ‚äÜ s := by
  obtain ‚ü®t, l1, l2‚ü© := (mem_nhd Œõ z s).1 h
  refine ‚ü®t ‚à© U.restrict (Œõ.S z.1), ?_, ?_, ?_‚ü©
  ¬∑ apply Filter.inter_mem l1
    apply IsOpen.mem_nhds
    ¬∑ exact isOpen_induced (Œõ.opn z.1)
    ¬∑ exact Œõ.mem z.1
  ¬∑ refine (Set.image_inter_subset _ _ _).trans ?_
    refine (Set.inter_subset_right _ _).trans ?_
    simp
    rintro ‚ü®x, hx‚ü© hx'
    exact hx'
  ¬∑ exact (Set.image_subset (Œõ.map z.1 z.2) (inter_subset_left _ _)).trans l2

lemma pure_le_nhd {h : HasLocalPrimitiveOn U f} : pure ‚â§ nhd (h.some) := by
  intro a
  simp only [nhd, le_map_iff, mem_pure]
  intro s hs
  apply (mem_image _ _ _).2 ‚ü®a.1, mem_of_mem_nhds hs,
    by simp [LocalPrimitiveOn.map, LocalPrimitiveOn.map‚ÇÄ]‚ü©

lemma mem_map_iff (Œõ : LocalPrimitiveOn U f) (s : Set U) (x y : holo_covering ‚ü®Œõ‚ü©) :
    y ‚àà Œõ.map x.1 x.2 '' s ‚Üî y.1 ‚àà s ‚àß y = Œõ.map x.1 x.2 y.1 where
  mp h := by
    obtain ‚ü®z, hz, rfl‚ü© := (mem_image _ _ _).1 h
    simp [LocalPrimitiveOn.map, hz]
  mpr h := (mem_image _ _ _).2 ‚ü®y.1, h.1, h.2.symm‚ü©

lemma image_eq_of_mem_map (Œõ : LocalPrimitiveOn U f) (s : Set U) (x y : holo_covering ‚ü®Œõ‚ü©)
    (h : y ‚àà Œõ.map x.1 x.2 '' s) : y.2 = Œõ.map‚ÇÄ x.1 x.2 y.1 := by
  rw [((mem_map_iff _ _ _ _).1 h).2] ; rfl

lemma premain (Œõ : LocalPrimitiveOn U f) (s : Set ‚ÑÇ) (hs : IsPreconnected s) (hs2 : IsOpen s)
    (x y : holo_covering ‚ü®Œõ‚ü©) (hxy : y.2 = Œõ.map‚ÇÄ x.1 x.2 y.1) (hy : y.1.1 ‚àà s)
    (hsx : s ‚äÜ Œõ.S x.1) (hsy : s ‚äÜ Œõ.S y.1) :
    EqOn (Œõ.map‚ÇÄ x.1 x.2) (Œõ.map‚ÇÄ y.1 y.2) s := by
  have l1 (z) (hz : z ‚àà s) : HasDerivAt (Œõ.map‚ÇÄ x.1 x.2) (f z) z := Œõ.der‚ÇÄ x.1 x.2 z (hsx hz)
  have l2 (z) (hz : z ‚àà s) : HasDerivAt (Œõ.map‚ÇÄ y.1 y.2) (f z) z := Œõ.der‚ÇÄ y.1 y.2 z (hsy hz)
  apply hs.apply_eq_of_hasDeriv_eq hs2 hy l1 l2
  simp [LocalPrimitiveOn.map‚ÇÄ, hxy]

lemma main (Œõ : LocalPrimitiveOn U f) (hU : IsOpen U) (s : Set U) (hs : IsPreconnected s)
    (hs2 : IsOpen s) (x y : holo_covering ‚ü®Œõ‚ü©) (hy : y ‚àà Œõ.map x.1 x.2 '' s)
    (hs3 : Subtype.val '' s ‚äÜ Œõ.S x.fst) (hs4 : Subtype.val '' s ‚äÜ Œõ.S y.fst) :
    EqOn (Œõ.map x.1 x.2) (Œõ.map y.1 y.2) s := by
  let s‚ÇÄ : Set ‚ÑÇ := Subtype.val '' s
  have hs‚ÇÄ : IsPreconnected s‚ÇÄ := hs.image _ continuous_subtype_val.continuousOn
  have hs2‚ÇÄ : IsOpen s‚ÇÄ := hU.isOpenMap_subtype_val s hs2
  have key : EqOn (LocalPrimitiveOn.map‚ÇÄ Œõ x.fst x.snd) (LocalPrimitiveOn.map‚ÇÄ Œõ y.fst y.snd) s‚ÇÄ := by
    obtain ‚ü®hy1, hy2‚ü© := (mem_map_iff _ _ _ _).1 hy
    rw [Prod.ext_iff] at hy2
    refine premain Œõ s‚ÇÄ hs‚ÇÄ hs2‚ÇÄ x y hy2.2 ?_ hs3 hs4
    exact mem_image_of_mem Subtype.val hy1
  intro z hz
  simp [LocalPrimitiveOn.map, key (mem_image_of_mem Subtype.val hz)]

lemma nhd_is_nhd [C : LocallyConnectedSpace U] (Œõ : LocalPrimitiveOn U f) (hU : IsOpen U)
    (z : holo_covering ‚ü®Œõ‚ü©) : ‚àÄ S ‚àà nhd Œõ z, ‚àÉ T ‚àà nhd Œõ z, T ‚äÜ S ‚àß ‚àÄ a ‚àà T, S ‚àà nhd Œõ a := by
  intro S hS
  obtain ‚ü®s, hs1, hs3, hs2‚ü© := mem_nhd'' _ _ _  hS
  obtain ‚ü®t, ht1, ht2, ht3, _‚ü© := locallyConnectedSpace_iff_open_connected_subsets.1 C z.1 s hs1
  refine ‚ü®Œõ.map z.1 z.2 '' t, image_mem_map (ht2.mem_nhds ht3), (image_subset _ ht1).trans hs2, ?_‚ü©
  intro a ha

  let t' := t ‚à© U.restrict (Œõ.S a.1)
  have l1 : t' ‚àà ùìù a.1 := by
    apply Filter.inter_mem
    ¬∑ apply ht2.mem_nhds
      rw [mem_map_iff] at ha
      exact ha.1
    ¬∑ apply IsOpen.mem_nhds
      ¬∑ exact isOpen_induced (Œõ.opn a.1)
      ¬∑ exact Œõ.mem a.1
  obtain ‚ü®t‚ÇÄ, l2, l3, l4, l5‚ü© := locallyConnectedSpace_iff_open_connected_subsets.1 C a.1 t' l1

  refine (mem_nhd _ _ _).2 ‚ü®t‚ÇÄ, l3.mem_nhds l4, ?_‚ü©
  ¬∑ intro u hu
    obtain ‚ü®w, hw, rfl‚ü© := (mem_image _ _ _).1 hu
    apply hs2

    have l6 : a ‚àà LocalPrimitiveOn.map Œõ z.fst z.snd '' t‚ÇÄ := by
      rw [mem_map_iff, Prod.ext_iff, LocalPrimitiveOn.map]
      simp [image_eq_of_mem_map _ _ _ _ ha, l4]
    have l7 : Subtype.val '' t‚ÇÄ ‚äÜ LocalPrimitiveOn.S Œõ z.fst := by
      apply (image_subset _ (l2.trans ((inter_subset_left _ _).trans ht1))).trans hs3
    have l8 : Subtype.val '' t‚ÇÄ ‚äÜ LocalPrimitiveOn.S Œõ a.fst := by
      simp only [image_subset_iff]
      exact Œª _ hx => (inter_subset_right _ _ (l2 hx))
    rw [‚Üê @main U f Œõ hU t‚ÇÄ l5.isPreconnected l3 z a l6 l7 l8 w hw]
    exact mem_image_of_mem _ (ht1 (l2 hw).1)

def p (h : HasLocalPrimitiveOn U f) : holo_covering h ‚Üí U := Œª z => z.1

lemma discreteTopology [LocallyConnectedSpace U] (hU : IsOpen U) (h : HasLocalPrimitiveOn U f) (z : U) :
    DiscreteTopology ‚Üë(p h ‚Åª¬π' {z}) := by
  let Œõ := h.some
  simp [discreteTopology_iff_singleton_mem_nhds, nhds_mkOfNhds, nhds_induced, p]
  rintro ‚ü®z, u‚ü© rfl
  rw [nhds_mkOfNhds _ _ pure_le_nhd (nhd_is_nhd _ hU)]
  refine ‚ü®Œõ.map z u '' U.restrict (Œõ.S z), ?_, ?_‚ü©
  ¬∑ apply image_mem_map
    simp only [nhds_induced]
    exact ‚ü®_, Œõ.nhd z, by rfl‚ü©
  ¬∑ rintro ‚ü®‚ü®a‚ÇÅ, ha‚ÇÅ‚ü©, a‚ÇÇ‚ü© rfl
    simp [LocalPrimitiveOn.map]
    rintro z hz _ h2
    obtain ‚ü®h3, h4‚ü© := Prod.ext_iff.1 h2
    simp at h3 h4
    simp [LocalPrimitiveOn.map, LocalPrimitiveOn.map‚ÇÄ, h3] at h4
    rw [‚Üê h4]

-- theorem isCoveringMap [LocallyConnectedSpace U] (hU : IsOpen U) (h : HasLocalPrimitiveOn U f) :
--     IsCoveringMap (p h) := by
--   intro z
--   refine ‚ü®discreteTopology hU h z, ?_‚ü©
--   sorry

end holo_covering