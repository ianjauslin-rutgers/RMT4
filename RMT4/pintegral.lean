import Mathlib.Tactic
import Mathlib.Analysis.Calculus.ContDiffDef
import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.MeasureTheory.Integral.IntervalIntegral
import RMT4.Subdivision

open Finset BigOperators Metric Set Subdivision Topology

def IsLocDerivOn (U : Set ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) : Prop :=
  ‚àÄ z ‚àà U, ‚àÉ Œµ > 0, ‚àÉ F : ‚ÑÇ ‚Üí ‚ÑÇ, EqOn (deriv F) f (ball z Œµ)

section pintegral

noncomputable def pintegral (hab : a ‚â§ b) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) (h2 : (Œ≥ '' Set.Icc a b) ‚äÜ U)
    (hŒ≥ : ContinuousOn Œ≥ (Set.Icc a b)) (hf : IsLocDerivOn U f) : ‚ÑÇ := by
  choose! Œµ hŒµ F _ using hf
  let S (t : Set.Icc a b) := Œ≥ ‚Åª¬π' ball (Œ≥ t) (Œµ (Œ≥ t))
  have h (t : Set.Icc a b) : ‚àÉ i, S i ‚àà ùìù[Set.Icc a b] t.1 :=
    ‚ü®t, hŒ≥ t t.2 (ball_mem_nhds (Œ≥ t) (hŒµ (Œ≥ t) (h2 (mem_image_of_mem _ t.2))))‚ü©
  choose œÉ hœÉ using @exists_adapted' _ _ _ S hab h
  choose I _ using hœÉ
  exact œÉ.sumSubAlong (Œª i => F (Œ≥ (I i))) Œ≥

def isPiecewiseDiffAlong (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) (œÉ : Subdivision a b) : Prop :=
  ‚àÄ i < œÉ.n + 1, ContDiffOn ‚Ñù 1 Œ≥ (œÉ.Icc i)

noncomputable def piecewiseIntegral (F : ‚ÑÇ ‚Üí ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) (œÉ : Subdivision a b) : ‚ÑÇ :=
  ‚àë i : Fin (œÉ.n + 1), (‚à´ t in (œÉ i.castSucc)..(œÉ i.succ), F (Œ≥ t) * deriv Œ≥ t)

lemma isLocDerivOn_deriv : IsLocDerivOn U (deriv F) := by
  intro z _; exact ‚ü®1, zero_lt_one, F, eqOn_refl _ _‚ü©

end pintegral