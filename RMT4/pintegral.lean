import Mathlib.Tactic
import Mathlib.Analysis.Calculus.ContDiffDef
import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.MeasureTheory.Integral.IntervalIntegral
import Mathlib.Topology.LocallyConstant.Basic
import Mathlib.Analysis.Calculus.MeanValue
import RMT4.Subdivision

open BigOperators Metric Set Subdivision Topology Filter Nat

structure IsLocDerivOn (U : Set ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) :=
  F : U ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ
  S : U ‚Üí Set ‚ÑÇ
  mem (z : U) : z.1 ‚àà S z
  opn (z : U) : IsOpen (S z)
  sub (z : U) : S z ‚äÜ U
  dif (z : U) : DifferentiableOn ‚ÑÇ (F z) (S z)
  eqd (z : U) : (S z).EqOn f (deriv (F z))

lemma IsLocDerivOn.nhd (h : IsLocDerivOn U f) (z : U) : h.S z ‚àà ùìù z.1 :=
  (h.opn z).mem_nhds (h.mem z)

noncomputable def isLocDerivOn_deriv (hU : IsOpen U) (hF : DifferentiableOn ‚ÑÇ F U) :
    IsLocDerivOn U (deriv F) where
  F _ := F
  S _ := U
  sub _ := by rfl
  mem z := z.2
  opn _ := hU
  eqd _ := eqOn_refl (deriv F) U
  dif _ := hF

section pintegral

noncomputable def pintegral (hab : a ‚â§ b) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) (h2 : MapsTo Œ≥ (Set.Icc a b) U)
    (hŒ≥ : ContinuousOn Œ≥ (Set.Icc a b)) (hf : IsLocDerivOn U f) : ‚ÑÇ :=
  have h1 (t : Set.Icc a b) : ‚àÉ i, hf.S i ‚àà ùìù (Œ≥ t) :=
    let u : U := ‚ü®Œ≥ t, h2 t.2‚ü©
    ‚ü®u, hf.nhd u‚ü©
  let RW := exists_reladapted hab hŒ≥ h1
  RW.œÉ.sumSubAlong (hf.F ‚àò RW.I) Œ≥

end pintegral

lemma isLocallyConstant_of_deriv_eq_zero (hU : IsOpen U) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (h : DifferentiableOn ‚ÑÇ f U)
    (hf : U.EqOn (deriv f) 0) :
    IsLocallyConstant (U.restrict f) := by
  refine (IsLocallyConstant.iff_exists_open _).2 (Œª ‚ü®z, hz‚ü© => ?_)
  obtain ‚ü®Œµ, L1, L2‚ü© := isOpen_iff.1 hU z hz
  refine ‚ü®ball ‚ü®z, hz‚ü© Œµ, isOpen_ball, mem_ball_self L1, Œª ‚ü®z', _‚ü© hz' => ?_‚ü©
  refine (convex_ball z Œµ).is_const_of_fderivWithin_eq_zero (h.mono L2) ?_ hz' (mem_ball_self L1)
  intro x hx
  rw [fderivWithin_eq_fderiv (isOpen_ball.uniqueDiffWithinAt hx)]
  ¬∑ exact ContinuousLinearMap.ext_ring (hf (L2 hx))
  ¬∑ exact h.differentiableAt (hU.mem_nhds (L2 hx))

lemma apply_eq_of_path (hab : a ‚â§ b) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (hf : IsLocallyConstant (U.restrict f))
    (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) (hŒ≥ : ContinuousOn Œ≥ (Set.Icc a b)) (h : MapsTo Œ≥ (Set.Icc a b) U) :
    f (Œ≥ b) = f (Œ≥ a) := by
  haveI : PreconnectedSpace (Set.Icc a b) := isPreconnected_iff_preconnectedSpace.1 isPreconnected_Icc
  have h2 := hf.comp_continuous (hŒ≥.restrict_mapsTo h)
  exact @IsLocallyConstant.apply_eq_of_isPreconnected _ _ _ _ (h2) _ isPreconnected_univ
    ‚ü®b, hab, le_rfl‚ü© ‚ü®a, le_rfl, hab‚ü© (mem_univ _) (mem_univ _)

lemma sumSubAlong_eq_zero {DW : IsLocDerivOn U 0}
  {RW : reladapted a b DW.S Œ≥} (hŒ≥ : ContinuousOn Œ≥ (Set.Icc a b)) :
    RW.œÉ.sumSubAlong (DW.F ‚àò RW.I) Œ≥ = 0 := by
  simp only [sumSubAlong, sumSub, sum]
  apply Finset.sum_eq_zero
  intro k hk
  rw [Finset.mem_range] at hk
  rw [sub_eq_zero]
  apply apply_eq_of_path (U := DW.S (RW.I k))
  ¬∑ refine RW.œÉ.mono hk.le ?_ (Nat.le_succ k)
    simpa only [mem_Iic, add_le_add_iff_right] using Nat.lt_succ.1 hk
  ¬∑ apply isLocallyConstant_of_deriv_eq_zero (DW.opn _) _ (DW.dif _)
    exact Œª _ hz => (DW.eqd (RW.I k) hz).symm
  ¬∑ apply hŒ≥.mono
    convert RW.œÉ.Icc_subset (i := k)
    simp only [Subdivision.Icc, Fin.coe_ofNat_eq_mod, Fin.val_succ, Nat.mod_eq_of_lt hk]
  ¬∑ apply (mapsTo'.2 (RW.sub k)).mono_left
    simpa [Subdivision.Icc, Nat.mod_eq_of_lt hk] using subset_rfl

lemma pintegral_zero : pintegral hab 0 Œ≥ h2 hŒ≥ hf = 0 := by
  simp only [pintegral, sumSubAlong_eq_zero hŒ≥]

example {hf : IsLocDerivOn U f} {RW‚ÇÅ RW‚ÇÇ : reladapted a b hf.S Œ≥} (h : RW‚ÇÅ.œÉ = RW‚ÇÇ.œÉ)
    (hŒ≥ : ContinuousOn Œ≥ (Set.Icc a b)) :
    RW‚ÇÅ.œÉ.sumSubAlong (hf.F ‚àò RW‚ÇÅ.I) Œ≥ = RW‚ÇÇ.œÉ.sumSubAlong (hf.F ‚àò RW‚ÇÇ.I) Œ≥ := by

  rcases hf with ‚ü®F, S, _, Sopn, _, Sdif, Seqd‚ü©
  rcases RW‚ÇÅ with ‚ü®œÉ, I‚ÇÅ, hI‚ÇÅ‚ü©
  rcases RW‚ÇÇ with ‚ü®œÉ', I‚ÇÇ, hI‚ÇÇ‚ü©
  simp only at hI‚ÇÅ hI‚ÇÇ h ‚ä¢
  subst h

  simp only [sumSubAlong, sumSub, sum]
  apply Finset.sum_congr rfl
  intro k hk
  simp only [Finset.mem_range] at hk
  rw [sub_eq_sub_iff_sub_eq_sub]
  set K : Fin (œÉ.n + 1) := ‚ü®k, hk‚ü©
  set ff := F (I‚ÇÅ K)
  set gg := F (I‚ÇÇ K)
  set Iuv := œÉ.Icc K
  set Uf := S (I‚ÇÅ K)
  set Ug := S (I‚ÇÇ K)
  set Ufg := Uf ‚à© Ug

  have huv : œÉ k ‚â§ œÉ (k + 1) := œÉ.mono hk.le (succ_le_succ (lt_succ.1 hk)) k.le_succ
  have hIuv' : Iuv = Set.Icc (œÉ k) (œÉ (k + 1)) := by simp only [Subdivision.Icc, Fin.succ_mk]

  have Uf' : DifferentiableOn ‚ÑÇ ff Uf := Sdif _
  have Ug' : DifferentiableOn ‚ÑÇ gg Ug := Sdif _

  have Uf'' := (Sdif _).mono (inter_subset_left Uf Ug)
  have Ug'' := (Sdif _).mono (inter_subset_right Uf Ug)

  have hfg : IsLocallyConstant (restrict Ufg (ff - gg)) := by
    refine isLocallyConstant_of_deriv_eq_zero ((Sopn _).inter (Sopn _)) _ (Uf''.sub Ug'') ?_
    intro z hz
    have e1 : DifferentiableAt ‚ÑÇ ff z := Uf'.differentiableAt ((Sopn _).mem_nhds hz.1)
    have e2 : DifferentiableAt ‚ÑÇ gg z := Ug'.differentiableAt ((Sopn _).mem_nhds hz.2)
    have e3 : deriv (ff - gg) z = deriv ff z - deriv gg z := deriv_sub e1 e2
    have e4 : f z = deriv ff z := Seqd (I‚ÇÅ K) ((inter_subset_left Uf Ug) hz)
    have e5 : f z = deriv gg z := Seqd (I‚ÇÇ K) ((inter_subset_right Uf Ug) hz)
    simp only [e3, ‚Üê e4, ‚Üê e5, sub_self, Pi.zero_apply]

  have hŒ≥1 : ContinuousOn Œ≥ Iuv := hŒ≥.mono œÉ.Icc_subset

  have hŒ≥2 : MapsTo Œ≥ Iuv Ufg := by
    simpa only [mapsTo', hIuv'] using subset_inter (hI‚ÇÅ K) (hI‚ÇÇ K)

  convert apply_eq_of_path huv (ff - gg) hfg Œ≥ (hIuv' ‚ñ∏ hŒ≥1) (hIuv' ‚ñ∏ hŒ≥2) using 1 <;>
    congr <;> ext <;> simp [hk]


