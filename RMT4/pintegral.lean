import Mathlib.Tactic
import Mathlib.Analysis.Calculus.ContDiffDef
import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.MeasureTheory.Integral.IntervalIntegral
import Mathlib.Topology.LocallyConstant.Basic
import Mathlib.Analysis.Calculus.MeanValue
import RMT4.Subdivision

open BigOperators Metric Set Subdivision Topology Filter Nat

structure LocalPrimitiveOn (U : Set ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) :=
  F : U ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ
  S : U ‚Üí Set ‚ÑÇ
  mem (z : U) : z.1 ‚àà S z
  opn (z : U) : IsOpen (S z)
  dif (z : U) : DifferentiableOn ‚ÑÇ (F z) (S z)
  eqd (z : U) : (S z).EqOn (deriv (F z)) f

lemma LocalPrimitiveOn.nhd (h : LocalPrimitiveOn U f) (z : U) : h.S z ‚àà ùìù z.1 :=
  (h.opn z).mem_nhds (h.mem z)

noncomputable def LocalPrimitiveOn_deriv (hU : IsOpen U) (hF : DifferentiableOn ‚ÑÇ F U) :
    LocalPrimitiveOn U (deriv F) where
  F _ := F
  S _ := U
  mem z := z.2
  opn _ := hU
  eqd _ := eqOn_refl (deriv F) U
  dif _ := hF

def HasLocalPrimitiveOn (U : Set ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) : Prop := Nonempty (LocalPrimitiveOn U f)

noncomputable def pintegral_aux (hab : a < b) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) (h2 : MapsTo Œ≥ (Icc a b) U)
    (hŒ≥ : ContinuousOn Œ≥ (Icc a b)) (hf : LocalPrimitiveOn U f) : ‚ÑÇ :=
  have h1 (t : Icc a b) : ‚àÉ i, hf.S i ‚àà ùìù (Œ≥ t) :=
    let u : U := ‚ü®Œ≥ t, h2 t.2‚ü©
    ‚ü®u, hf.nhd u‚ü©
  let RW := exists_reladapted hab hŒ≥ h1
  RW.œÉ.sumSubAlong (hf.F ‚àò RW.I) Œ≥

noncomputable def pintegral (a b : ‚Ñù) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) : ‚ÑÇ := by
  by_cases h : a < b ‚àß ContinuousOn Œ≥ (Icc a b) ‚àß ‚àÉ U : Set ‚ÑÇ, MapsTo Œ≥ (Icc a b) U ‚àß
    HasLocalPrimitiveOn U f
  ¬∑ choose hab hŒ≥ U h2 hf using h
    exact pintegral_aux hab f Œ≥ h2 hŒ≥ hf.some
  ¬∑ exact 0

lemma isLocallyConstant_of_deriv_eq_zero (hU : IsOpen U) {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h : DifferentiableOn ‚ÑÇ f U)
    (hf : U.EqOn (deriv f) 0) :
    IsLocallyConstant (U.restrict f) := by
  refine (IsLocallyConstant.iff_exists_open _).2 (Œª ‚ü®z, hz‚ü© => ?_)
  obtain ‚ü®Œµ, L1, L2‚ü© := isOpen_iff.1 hU z hz
  refine ‚ü®ball ‚ü®z, hz‚ü© Œµ, isOpen_ball, mem_ball_self L1, Œª ‚ü®z', _‚ü© hz' => ?_‚ü©
  refine (convex_ball z Œµ).is_const_of_fderivWithin_eq_zero (h.mono L2) ?_ hz' (mem_ball_self L1)
  intro x hx
  rw [fderivWithin_eq_fderiv (isOpen_ball.uniqueDiffWithinAt hx)]
  ¬∑ exact ContinuousLinearMap.ext_ring (hf (L2 hx))
  ¬∑ exact h.differentiableAt (hU.mem_nhds (L2 hx))

lemma apply_eq_of_path (hab : a ‚â§ b) {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : IsLocallyConstant (U.restrict f))
    {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (hŒ≥ : ContinuousOn Œ≥ (Icc a b)) (h : MapsTo Œ≥ (Icc a b) U) :
    f (Œ≥ b) = f (Œ≥ a) := by
  haveI : PreconnectedSpace (Icc a b) := isPreconnected_iff_preconnectedSpace.1 isPreconnected_Icc
  have h2 := hf.comp_continuous (hŒ≥.restrict_mapsTo h)
  exact @IsLocallyConstant.apply_eq_of_isPreconnected _ _ _ _ (h2) _ isPreconnected_univ
    ‚ü®b, hab, le_rfl‚ü© ‚ü®a, le_rfl, hab‚ü© (mem_univ _) (mem_univ _)

lemma sumSubAlong_eq_zero (hab : a < b) {DW : LocalPrimitiveOn U 0}
  {RW : reladapted a b DW.S Œ≥} (hŒ≥ : ContinuousOn Œ≥ (Icc a b)) :
    RW.œÉ.sumSubAlong (DW.F ‚àò RW.I) Œ≥ = 0 := by
  refine Subdivision.sum_eq_zero (Œª k => (sub_eq_zero.2 ?_))
  apply apply_eq_of_path (RW.œÉ.mono' hab).le
  ¬∑ apply isLocallyConstant_of_deriv_eq_zero (DW.opn _) (DW.dif _)
    exact Œª _ hz => DW.eqd (RW.I k) hz
  ¬∑ exact hŒ≥.mono (RW.œÉ.piece_subset hab.le)
  ¬∑ exact mapsTo'.2 (RW.sub k)

@[simp] lemma pintegral_zero (hab : a < b) (hŒ≥ : ContinuousOn Œ≥ (Icc a b)) :
    pintegral a b 0 Œ≥ = 0 := by
  have h : ‚àÉ U, MapsTo Œ≥ (Icc a b) U ‚àß HasLocalPrimitiveOn U 0 := by
    refine ‚ü®univ, mapsTo_univ _ _, ?_‚ü©
    refine ‚ü®Œª _ => 0, Œª _ => univ, Œª _ => mem_univ _, Œª _ => isOpen_univ,
        ?_, ?_‚ü©
    ¬∑ intro z
      apply differentiableOn_const
    ¬∑ intro z u _
      change deriv (Œª _ => 0) u = 0
      simp only [deriv_const]
  simp [pintegral, hab, hŒ≥, h, pintegral_aux, sumSubAlong_eq_zero]

lemma sub_eq_sub_of_deriv_eq_deriv (hab : a ‚â§ b) (hU : IsOpen U)
    {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (hŒ≥‚ÇÅ : ContinuousOn Œ≥ (Icc a b)) (hŒ≥‚ÇÇ : MapsTo Œ≥ (Icc a b) U)
    {f g : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : DifferentiableOn ‚ÑÇ f U) (hg : DifferentiableOn ‚ÑÇ g U)
    (hfg : ‚àÄ z ‚àà U, deriv f z = deriv g z) :
    f (Œ≥ b) - f (Œ≥ a) = g (Œ≥ b) - g (Œ≥ a) := by
  rw [sub_eq_sub_iff_sub_eq_sub]
  change (f - g) (Œ≥ b) = (f - g) (Œ≥ a)
  refine apply_eq_of_path (U := U) hab ?_ hŒ≥‚ÇÅ hŒ≥‚ÇÇ
  refine isLocallyConstant_of_deriv_eq_zero hU (hf.sub hg) (Œª z hz => ?_)
  have h1 : DifferentiableAt ‚ÑÇ f z := hf.differentiableAt (hU.mem_nhds hz)
  have h2 : DifferentiableAt ‚ÑÇ g z := hg.differentiableAt (hU.mem_nhds hz)
  have h3 : deriv (f - g) z = deriv f z - deriv g z := deriv_sub h1 h2
  simp [hfg z hz, h3]

lemma sumSubAlong_eq_of_sigma (hab : a < b) {hf : LocalPrimitiveOn U f} {RW‚ÇÅ RW‚ÇÇ : reladapted a b hf.S Œ≥}
    (h : RW‚ÇÅ.œÉ = RW‚ÇÇ.œÉ) (hŒ≥ : ContinuousOn Œ≥ (Icc a b)) :
    RW‚ÇÅ.œÉ.sumSubAlong (hf.F ‚àò RW‚ÇÅ.I) Œ≥ = RW‚ÇÇ.œÉ.sumSubAlong (hf.F ‚àò RW‚ÇÇ.I) Œ≥ := by
  rcases hf with ‚ü®F, S, _, Sopn, Sdif, Seqd‚ü©
  rcases RW‚ÇÅ with ‚ü®œÉ, I‚ÇÅ, hI‚ÇÅ‚ü©
  rcases RW‚ÇÇ with ‚ü®œÉ', I‚ÇÇ, hI‚ÇÇ‚ü©
  subst h
  refine Subdivision.sum_congr (Œª k => ?_)
  apply sub_eq_sub_of_deriv_eq_deriv (œÉ.mono' hab).le ((Sopn _).inter (Sopn _))
  ¬∑ exact (hŒ≥.mono (œÉ.piece_subset hab.le))
  ¬∑ simpa only [mapsTo'] using subset_inter (hI‚ÇÅ k) (hI‚ÇÇ k)
  ¬∑ exact (Sdif _).mono (inter_subset_left _ _)
  ¬∑ exact (Sdif _).mono (inter_subset_right _ _)
  ¬∑ exact Œª z hz => (Seqd _ hz.1).trans (Seqd _ hz.2).symm

lemma telescopic (f : Fin (n + 1) ‚Üí ‚ÑÇ) :
    ‚àë i : Fin n, (f i.succ - f i.castSucc) = f (Fin.last n) - f 0 := by
  have l1 : ‚àë i : Fin n, f (i.succ) = ‚àë i : Fin (n + 1), f i - f 0 := by
    simp [Fin.sum_univ_succ f]
  have l2 : ‚àë i : Fin n, f (i.castSucc) = ‚àë i : Fin (n + 1), f i - f (Fin.last n) := by
    simp [Fin.sum_univ_castSucc f]
  simp [l1, l2]

-- missing : DifferentiableOn.inter
lemma sumSubAlong_eq_sub (hab : a < b) (hF : DifferentiableOn ‚ÑÇ F U) (hf : LocalPrimitiveOn U (deriv F))
    (hŒ≥ : ContinuousOn Œ≥ (Icc a b)) (RW : reladapted a b hf.S Œ≥) (hU : IsOpen U)
    (hh : MapsTo Œ≥ (Icc a b) U):
    RW.œÉ.sumSubAlong (hf.F ‚àò RW.I) Œ≥ = F (Œ≥ b) - F (Œ≥ a) := by
  have key (i : Fin (RW.œÉ.size + 1)) :
      ((hf.F ‚àò RW.I) i ‚àò Œ≥) (RW.œÉ.y i) - ((hf.F ‚àò RW.I) i ‚àò Œ≥) (RW.œÉ.x i) =
      F (Œ≥ (RW.œÉ.y i)) - F (Œ≥ (RW.œÉ.x i)) := by
    apply sub_eq_sub_of_deriv_eq_deriv (U := hf.S (RW.I i) ‚à© U)
    ¬∑ exact (RW.œÉ.mono' hab).le
    ¬∑ exact (hf.opn (RW.I i)).inter hU
    ¬∑ exact hŒ≥.mono (RW.œÉ.piece_subset hab.le)
    ¬∑ have e1 := Set.mapsTo'.2 (RW.sub i)
      have e2 := RW.œÉ.piece_subset (i := i) hab.le
      have e3 := hh.mono_left e2
      exact e1.inter e3
    ¬∑ have := (hf.dif (RW.I i))
      intro z hz
      apply (differentiableWithinAt_inter ?_).2 (this z hz.1)
      exact hU.mem_nhds hz.2
    ¬∑ apply DifferentiableOn.mono hF
      exact inter_subset_right _ _
    ¬∑ exact Œª z hz => hf.eqd (RW.I i) hz.1
  simp only [sumSubAlong, sumSub, sum, key]
  convert telescopic (F ‚àò Œ≥ ‚àò RW.œÉ)
  simp

-- lemma pintegral_deriv (hab : a < b) (hU : IsOpen U) (hŒ≥ : ContinuousOn Œ≥ (Icc a b))
--     (h2 : MapsTo Œ≥ (Icc a b) U) (hF : DifferentiableOn ‚ÑÇ F U) :
--     pintegral_aux hab (deriv F) Œ≥ h2 hŒ≥ (LocalPrimitiveOn_deriv hU hF) = F (Œ≥ b) - F (Œ≥ a) :=
--   sumSubAlong_eq_sub hab hF _ hŒ≥ _
