import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.Analysis.Calculus.ParametricIntegral
import Mathlib.Order.Interval
import Mathlib.MeasureTheory.Integral.CircleIntegral
import Mathlib.MeasureTheory.Integral.IntervalIntegral
import Mathlib.MeasureTheory.Function.Jacobian
import Mathlib.Topology.PathConnected
import RMT4.to_mathlib

open intervalIntegral Real MeasureTheory Filter Topology Set Metric

section definitions

/-- We start with a basic definition of the integral of a function along a path, which makes sense
  when the path is differentiable -/

noncomputable def curvint (t‚ÇÅ t‚ÇÇ : ‚Ñù) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) : ‚ÑÇ :=
  ‚à´ t in t‚ÇÅ..t‚ÇÇ, deriv Œ≥ t ‚Ä¢ f (Œ≥ t)

/-- Version with `deriv_within` is useful -/

noncomputable def curvint' (t‚ÇÅ t‚ÇÇ : ‚Ñù) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) : ‚ÑÇ :=
  ‚à´ t in t‚ÇÅ..t‚ÇÇ, derivWithin Œ≥ (Set.uIcc t‚ÇÅ t‚ÇÇ) t ‚Ä¢ f (Œ≥ t)

lemma curvint'_eq_curvint {f : ‚ÑÇ ‚Üí ‚ÑÇ} {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} : curvint' a b f Œ≥ = curvint a b f Œ≥ :=
  integral_congr_uIoo (Œª _ ht => congr_arg‚ÇÇ _ (derivWithin_of_mem_uIoo ht) rfl)

end definitions

section derivcurvint

variable
  {t‚ÇÅ t‚ÇÇ : ‚Ñù} {F F' : ‚ÑÇ ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ}

theorem hasDerivAt_curvint (ht : t‚ÇÅ < t‚ÇÇ)
    (Œ≥_diff : ContDiffOn ‚Ñù 1 Œ≥ (Icc t‚ÇÅ t‚ÇÇ))
    (F_cont : ‚àÄ·∂† i in ùìù i‚ÇÄ, ContinuousOn (F i) (Œ≥ '' Icc t‚ÇÅ t‚ÇÇ))
    (F_deri : ‚àÄ·∂† i in ùìù i‚ÇÄ, ‚àÄ t ‚àà Icc t‚ÇÅ t‚ÇÇ, HasDerivAt (Œª i => F i (Œ≥ t)) (F' i (Œ≥ t)) i)
    (F'_cont : ContinuousOn (F' i‚ÇÄ) (Œ≥ '' Icc t‚ÇÅ t‚ÇÇ))
    (F'_norm : ‚àÄ·∂† i in ùìù i‚ÇÄ, ‚àÄ t ‚àà Icc t‚ÇÅ t‚ÇÇ, ‚ÄñF' i (Œ≥ t)‚Äñ ‚â§ C)
    :
    HasDerivAt (Œª i => curvint t‚ÇÅ t‚ÇÇ (F i) Œ≥) (curvint t‚ÇÅ t‚ÇÇ (F' i‚ÇÄ) Œ≥) i‚ÇÄ := by
  simp_rw [‚Üê curvint'_eq_curvint]
  set Œº : Measure ‚Ñù := volume.restrict (Ioc t‚ÇÅ t‚ÇÇ)
  set œÜ : ‚ÑÇ ‚Üí ‚Ñù ‚Üí ‚ÑÇ := Œª i t => derivWithin Œ≥ (Icc t‚ÇÅ t‚ÇÇ) t ‚Ä¢ F i (Œ≥ t)
  set œà : ‚ÑÇ ‚Üí ‚Ñù ‚Üí ‚ÑÇ := Œª i t => derivWithin Œ≥ (Icc t‚ÇÅ t‚ÇÇ) t ‚Ä¢ F' i (Œ≥ t)
  obtain ‚ü®Œ¥, hŒ¥, h_in_Œ¥‚ü© := eventually_nhds_iff_ball.mp (F_deri.and F'_norm)
  simp only [curvint']

  have Œ≥'_cont : ContinuousOn (derivWithin Œ≥ (Icc t‚ÇÅ t‚ÇÇ)) (Icc t‚ÇÅ t‚ÇÇ) :=
    Œ≥_diff.continuousOn_derivWithin (uniqueDiffOn_Icc ht) le_rfl
  obtain ‚ü®C', h‚ü© := (isCompact_Icc.image_of_continuousOn Œ≥'_cont).isBounded.subset_ball 0

  have œÜ_cont : ‚àÄ·∂† i in ùìù i‚ÇÄ, ContinuousOn (œÜ i) (Icc t‚ÇÅ t‚ÇÇ) := by
    filter_upwards [F_cont] with i h
    exact Œ≥'_cont.smul (h.comp Œ≥_diff.continuousOn (mapsTo_image _ _))

  have œÜ_meas : ‚àÄ·∂† i in ùìù i‚ÇÄ, AEStronglyMeasurable (œÜ i) Œº := by
    filter_upwards [œÜ_cont] with i h
    exact (h.mono Ioc_subset_Icc_self).aestronglyMeasurable measurableSet_Ioc

  have œÜ_intg : Integrable (œÜ i‚ÇÄ) Œº :=
    œÜ_cont.self_of_nhds.integrableOn_Icc.mono_set Ioc_subset_Icc_self

  have œÜ_deri : ‚àÄ·µê t ‚àÇŒº, ‚àÄ i ‚àà ball i‚ÇÄ Œ¥, HasDerivAt (Œª j => œÜ j t) (œà i t) i := by
    refine (ae_restrict_iff' measurableSet_Ioc).mpr (eventually_of_forall ?_)
    intro t ht i hi
    apply ((h_in_Œ¥ i hi).1 t (Ioc_subset_Icc_self ht)).const_smul

  have œà_cont : ContinuousOn (œà i‚ÇÄ) (Icc t‚ÇÅ t‚ÇÇ) :=
    Œ≥'_cont.smul (F'_cont.comp Œ≥_diff.continuousOn (mapsTo_image _ _))

  have œà_meas : AEStronglyMeasurable (œà i‚ÇÄ) Œº :=
    (œà_cont.mono Ioc_subset_Icc_self).aestronglyMeasurable measurableSet_Ioc

  have œà_norm : ‚àÄ·µê t ‚àÇŒº, ‚àÄ x ‚àà ball i‚ÇÄ Œ¥, ‚Äñœà x t‚Äñ ‚â§ C' * C := by
    refine (ae_restrict_iff' measurableSet_Ioc).mpr (eventually_of_forall (Œª t ht w hw => ?_))
    rw [norm_smul]
    have e1 := mem_closedBall_zero_iff.mp $
      ball_subset_closedBall (h (mem_image_of_mem _ (Ioc_subset_Icc_self ht)))
    have e2 := (h_in_Œ¥ w hw).2 t (Ioc_subset_Icc_self ht)
    exact mul_le_mul e1 e2 (norm_nonneg _) ((norm_nonneg _).trans e1)

  have hC : Integrable (Œª (_ : ‚Ñù) => C' * C) Œº := integrable_const _

  simpa [curvint', intervalIntegral, ht.le] using
    (hasDerivAt_integral_of_dominated_loc_of_deriv_le hŒ¥ œÜ_meas œÜ_intg œà_meas œà_norm hC œÜ_deri).2

end derivcurvint

section bla

variable {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} {œÜ œÜ' : ‚Ñù ‚Üí ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ}

theorem cdv
    (œÜ_diff : ContDiffOn ‚Ñù 1 œÜ (uIcc a b))
    (œÜ_maps : œÜ '' uIcc a b = uIcc (œÜ a) (œÜ b))
    (Œ≥_diff : ContDiffOn ‚Ñù 1 Œ≥ (uIcc (œÜ a) (œÜ b)))
    (f_cont : ContinuousOn f (Œ≥ '' uIcc (œÜ a) (œÜ b)))
    :
    curvint (œÜ a) (œÜ b) f Œ≥ = curvint a b f (Œ≥ ‚àò œÜ) := by
  have l1 : ContinuousOn (fun x => derivWithin Œ≥ (uIcc (œÜ a) (œÜ b)) x ‚Ä¢ f (Œ≥ x)) (œÜ '' uIcc a b) := by
    have e1 := Œ≥_diff.continuousOn_derivWithin'' le_rfl
    have e2 := f_cont.comp Œ≥_diff.continuousOn (mapsTo_image _ _)
    simpa only [œÜ_maps] using e1.smul e2
  simp_rw [‚Üê curvint'_eq_curvint, curvint', ‚Üê œÜ_diff.integral_derivWithin_smul_comp l1]
  refine integral_congr_uIoo (Œª t ht => ?_)
  have l2 : MapsTo œÜ (uIcc a b) (uIcc (œÜ a) (œÜ b)) := œÜ_maps ‚ñ∏ mapsTo_image _ _
  have l6 : t ‚àà uIcc a b := uIoo_subset_uIcc ht
  have l3 : DifferentiableWithinAt ‚Ñù Œ≥ (uIcc (œÜ a) (œÜ b)) (œÜ t) := Œ≥_diff.differentiableOn le_rfl (œÜ t) (l2 l6)
  have l4 : DifferentiableWithinAt ‚Ñù œÜ (uIcc a b) t := (œÜ_diff t l6).differentiableWithinAt le_rfl
  have l5 : UniqueDiffWithinAt ‚Ñù (uIcc a b) t := uniqueDiffWithinAt_of_mem_nhds (uIcc_mem_nhds ht)
  simp [derivWithin.scomp t l3 l4 l2 l5] ; ring

end bla

section holo

variable (Œì Œì' : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ) (f f' : ‚ÑÇ ‚Üí ‚ÑÇ) (a b u‚ÇÄ : ‚Ñù)

theorem holo
    (hab : a ‚â§ b)
    (hcycle : ‚àÄ u, Œì u b = Œì u a)
    (hcycle' : ‚àÄ u, Œì' u b = Œì' u a)
    (hŒì : ‚àÄ·∂† u in ùìù u‚ÇÄ, ContDiffOn ‚Ñù 1 (Œì u) (Icc a b))
    :
    HasDerivAt (Œª u => curvint a b f (Œì u)) 0 u‚ÇÄ
    := by

  simp_rw [‚Üê curvint'_eq_curvint]
  simp [curvint', intervalIntegral, hab]

  set Œº : Measure ‚Ñù := volume.restrict (Ioc a b)
  set F : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ := Œª u t =>
    derivWithin (Œì u) (Icc a b) t * f (Œì u t)
  set F' : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ := Œª u t =>
    derivWithin (Œì' u) (Icc a b) t * f (Œì u t) +
    derivWithin (Œì u) (Icc a b) t * Œì' u t * f' (Œì u t) with def_F'
  set G : ‚Ñù ‚Üí ‚ÑÇ := Œª s => Œì' u‚ÇÄ s * f (Œì u‚ÇÄ s) with def_G
  set C : ‚Ñù ‚Üí ‚Ñù := sorry
  set Œµ : ‚Ñù := sorry
  have hŒµ : 0 < Œµ := sorry

  have F_cont : ‚àÄ·∂† u in ùìù u‚ÇÄ, ContinuousOn (F u) (Icc a b) := by
    filter_upwards [hŒì] with u h
    sorry

  have F'_cont : ContinuousOn (F' u‚ÇÄ) (Icc a b) := sorry

  have h1 : ‚àÄ·∂† u in ùìù u‚ÇÄ, AEStronglyMeasurable (F u) Œº := by
    filter_upwards [F_cont] with u h
    exact (h.mono Ioc_subset_Icc_self).aestronglyMeasurable measurableSet_Ioc

  have h2 : Integrable (F u‚ÇÄ) Œº :=
    F_cont.self_of_nhds.integrableOn_Icc.mono_set Ioc_subset_Icc_self

  have h3 : AEStronglyMeasurable (F' u‚ÇÄ) Œº :=
    (F'_cont.mono Ioc_subset_Icc_self).aestronglyMeasurable measurableSet_Ioc

  have h4 : ‚àÄ·µê t ‚àÇŒº, ‚àÄ u ‚àà ball u‚ÇÄ Œµ, ‚ÄñF' u t‚Äñ ‚â§ C t := sorry

  have h5 : Integrable C Œº := sorry

  have h6 : ‚àÄ·µê t ‚àÇŒº, ‚àÄ u ‚àà ball u‚ÇÄ Œµ, HasDerivAt (F ¬∑ t) (F' u t) u := by sorry

  convert ‚Üê (hasDerivAt_integral_of_dominated_loc_of_deriv_le hŒµ h1 h2 h3 h4 h5 h6).2

  have h7 : ‚àÄ u t, F' u t = deriv G t := sorry

  simp [h7]

  have h8 : ‚àÄ x ‚àà uIcc a b, DifferentiableAt ‚Ñù G x := sorry

  have h9 : IntervalIntegrable (deriv G) volume a b := sorry

  have := @integral_deriv_eq_sub ‚ÑÇ _ _ _ G a b h8 h9

  simpa [def_G, intervalIntegral, hab, hcycle, hcycle'] using this

end holo