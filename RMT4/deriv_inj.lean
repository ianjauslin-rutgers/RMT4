import RMT4.hurwitz

open Complex Metric circleIntegral Topology Filter

variable {U : Set ‚ÑÇ}

-- open filter set metric complex circle_integral
-- open_locale topological_space

-- variables {f g : ‚ÑÇ ‚Üí ‚ÑÇ} {z z‚ÇÄ c : ‚ÑÇ} {r : ‚Ñù} {U : set ‚ÑÇ} {p : formal_multilinear_series ‚ÑÇ ‚ÑÇ ‚ÑÇ}

-- -- TODO: mix with local_index_theorem with the order of the zero

lemma crucial (hU : IsOpen U) (hcr : closedBall c r ‚äÜ U) (hz‚ÇÄ : z‚ÇÄ ‚àà ball c r) (hf : DifferentiableOn ‚ÑÇ f U)
    (hfz‚ÇÄ : f z‚ÇÄ = 0) (hf'z‚ÇÄ : deriv f z‚ÇÄ ‚â† 0) (hfz : ‚àÄ z ‚àà closedBall c r, z ‚â† z‚ÇÄ ‚Üí f z ‚â† 0) :
    cindex c r f = 1 := by
  have hr : 0 < r := dist_nonneg.trans_lt hz‚ÇÄ
  set g := dslope f z‚ÇÄ
  have h1 : DifferentiableOn ‚ÑÇ g U :=
    (differentiableOn_dslope (hU.mem_nhds (hcr (ball_subset_closedBall hz‚ÇÄ)))).2 hf
  have h2 : ‚àÄ z ‚àà closedBall c r, g z ‚â† 0 := by
    rintro z hz
    by_cases z = z‚ÇÄ
    case pos => simp [dslope, h, Function.update, hf'z‚ÇÄ]
    case neg => simp [dslope, h, Function.update, slope, sub_ne_zero.2 h, hfz‚ÇÄ, hfz z hz h]
  have h10 : ‚àÄ z ‚àà sphere c r, z - z‚ÇÄ ‚â† 0 :=
    Œª z hz => sub_ne_zero.2 (sphere_disjoint_ball.ne_of_mem hz hz‚ÇÄ)
  suffices : cindex c r f = ((2 * Real.pi * I)‚Åª¬π * ‚àÆ z in C(c, r), (z - z‚ÇÄ)‚Åª¬π) + cindex c r g
  { rw [this, integral_sub_inv_of_mem_ball hz‚ÇÄ, cindex_eq_zero hU hr hcr h1 h2]
    field_simp [two_ne_zero, Real.pi_ne_zero, I_ne_zero] }
  have h6 : ‚àÄ z ‚àà sphere c r, deriv f z / f z = (z - z‚ÇÄ)‚Åª¬π + deriv g z / g z := by
    rintro z hz
    have h3 : ‚àÄ z ‚àà U, f z = (z - z‚ÇÄ) * g z :=
      Œª z _ => by simpa only [smul_eq_mul, hfz‚ÇÄ, sub_zero] using (sub_smul_dslope f z‚ÇÄ z).symm
    have hz' : z ‚àà U := hcr (sphere_subset_closedBall hz)
    have e0 : U ‚àà ùìù z := hU.mem_nhds hz'
    have h4 : deriv f z = deriv (Œª w => (w - z‚ÇÄ) * g w) z :=
      EventuallyEq.deriv_eq (eventually_of_mem e0 h3)
    have e1 : DifferentiableAt ‚ÑÇ (Œª y => y - z‚ÇÄ) z := differentiableAt_id.sub_const z‚ÇÄ
    have e2 : DifferentiableAt ‚ÑÇ g z := h1.differentiableAt e0
    have h5 : deriv f z = g z + (z - z‚ÇÄ) * deriv g z := by
      have : deriv (fun y => y - z‚ÇÄ) z = 1 := by
        change deriv (fun y => id y - z‚ÇÄ) z = 1
        simp [deriv_sub_const]
      simp [h4, deriv_mul e1 e2, this]
    have e3 : g z ‚â† 0 := h2 z (sphere_subset_closedBall hz)
    field_simp [h3 z hz', h5, mul_comm, h10 z hz]
  simp only [cindex, integral_congr hr.le h6, ‚Üê mul_add]
  congr
  refine circleIntegral.add hr.le ((continuousOn_id.sub (continuousOn_const)).inv‚ÇÄ h10) ?_
  refine ContinuousOn.div ?_ ?_ ?_
  { exact (h1.deriv hU).continuousOn.mono (sphere_subset_closedBall.trans hcr) }
  { exact h1.continuousOn.mono (sphere_subset_closedBall.trans hcr) }
  { exact Œª z hz => h2 z (sphere_subset_closedBall hz) }

lemma tendsto_uniformly_on_const {f : Œ± ‚Üí Œ≤} [UniformSpace Œ≤] {p : Filter Œπ} {s : Set Œ±} :
  TendstoUniformlyOn (Œª _ => f) f p s :=
UniformOnFun.tendsto_iff_tendstoUniformlyOn.1 tendsto_const_nhds s (Set.mem_singleton _)

-- lemma bla (hf : analytic_at ‚ÑÇ f z‚ÇÄ)
--   (hf' : has_fpower_series_at (deriv f) (0 : formal_multilinear_series ‚ÑÇ ‚ÑÇ ‚ÑÇ) z‚ÇÄ) :
--   ‚àÄ·∂† z in ùìù z‚ÇÄ, f z = f z‚ÇÄ :=
-- begin
--   have h1 : ‚àÄ·∂† z in ùìù z‚ÇÄ, analytic_at ‚ÑÇ f z := (IsOpen_analytic_at ‚ÑÇ f).mem_nhds hf,
--   obtain ‚ü®Œµ, hŒµ, h‚ü© := metric.mem_nhds_iff.1 (h1.and hf'.eventually_eq_zero),
--   refine metric.mem_nhds_iff.2 ‚ü®Œµ, hŒµ, Œª z hz, _‚ü©,
--   have h3 : ‚àÄ z ‚àà Ball z‚ÇÄ Œµ, fderiv_within ‚ÑÇ f (ball z‚ÇÄ Œµ) z = 0,
--   { rintro z hz,
--     rw fderiv_within_eq_fderiv (IsOpen_ball.unique_diff_within_at hz) ((h hz).1.DifferentiableAt),
--     ext1,
--     simpa [fderiv_deriv] using (h hz).2 },
--   have h4 : DifferentiableOn ‚ÑÇ f (ball z‚ÇÄ Œµ) := Œª z hz, (h hz).1.differentiable_within_at,
--   exact convex.is_const_of_fderiv_within_eq_zero (convex_ball z‚ÇÄ Œµ) h4 h3 hz (mem_ball_self hŒµ)
-- end

-- lemma two_le_order_of_deriv_eq_zero (hgp : has_fpower_series_at g p z‚ÇÄ) (hp : p ‚â† 0)
--   (hg : g z‚ÇÄ = 0) (hg' : deriv g z‚ÇÄ = 0) :
--   2 ‚â§ p.order :=
-- begin
--   classical,
--   have h1 : p.coeff 1 = 0 := by simpa only [hg'] using hgp.deriv.symm,
--   have h2 : p 0 = 0 := by ext1; simpa only [hg] using hgp.coeff_zero x,
--   have h3 : p 1 = 0 := by { ext1; simp [h1] },
--   rw [formal_multilinear_series.order_eq_find' hp, nat.le_find_iff],
--   rintro n hn,
--   cases n, { simp only [h2, pi.zero_apply, ne.def, eq_self_iff_true, not_true, not_false_iff] },
--   cases n, { simp only [h3, pi.zero_apply, ne.def, eq_self_iff_true, not_true, not_false_iff] },
--   cases not_le.2 hn (nat.succ_le_succ (nat.succ_le_succ (nat.zero_le n)))
-- end

-- lemma tendsto_uniformly_on_add_const :
--   tendsto_uniformly_on (Œª (Œµ z : ‚ÑÇ), g z + Œµ) g (ùìù[‚â†] 0) U :=
-- begin
--   have : tendsto id (ùìù[‚â†] (0 : ‚ÑÇ)) (ùìù 0) := nhds_within_le_nhds,
--   have : tendsto_uniformly_on (Œª (Œµ z : ‚ÑÇ), Œµ) 0 (ùìù[‚â†] 0) U := this.tendsto_uniformly_on_const U,
--   simpa using tendsto_uniformly_on_const.add this
-- end

-- lemma deriv_ne_zero_of_inj_aux (hU : IsOpen U) (hg : DifferentiableOn ‚ÑÇ g U) (hi : inj_on g U)
--   (hz‚ÇÄ : z‚ÇÄ ‚àà U) (hgz‚ÇÄ : g z‚ÇÄ = 0) :
--   deriv g z‚ÇÄ ‚â† 0 :=
-- begin
--   obtain ‚ü®p, hp‚ü© : analytic_at ‚ÑÇ g z‚ÇÄ := hg.analytic_at (hU.mem_nhds hz‚ÇÄ),
--   have h25 : ‚àÄ·∂† z in ùìù[‚â†] z‚ÇÄ, g z ‚â† 0,
--   { simp only [eventually_nhds_within_iff],
--     filter_upwards [hU.eventually_mem hz‚ÇÄ] with z hz hzz‚ÇÄ,
--     simpa only [hgz‚ÇÄ] using hi.ne hz hz‚ÇÄ hzz‚ÇÄ },
--   have h17 : p ‚â† 0,
--     by simpa [‚Üê hp.locally_zero_iff.not] using h25.frequently.filter_mono nhds_within_le_nhds,
--   by_contra,
--   have h6 : 2 ‚â§ p.order := two_le_order_of_deriv_eq_zero hp h17 hgz‚ÇÄ h,
--   obtain ‚ü®r, h7, h8, h14, h21, h20‚ü© : ‚àÉ r > 0,
--     cindex z‚ÇÄ r g = p.order ‚àß
--     (‚àÄ z ‚àà ClosedBall z‚ÇÄ r, z ‚â† z‚ÇÄ ‚Üí deriv g z ‚â† 0) ‚àß
--     (‚àÄ z ‚àà ClosedBall z‚ÇÄ r, z ‚â† z‚ÇÄ ‚Üí g z ‚â† 0) ‚àß
--     ClosedBall z‚ÇÄ r ‚äÜ U,
--   { obtain ‚ü®q, hq‚ü© : analytic_at ‚ÑÇ (deriv g) z‚ÇÄ := (hg.deriv hU).analytic_at (hU.mem_nhds hz‚ÇÄ),
--     have h26 : q ‚â† 0,
--     { rintro rfl,
--       simpa [hgz‚ÇÄ] using ((bla ‚ü®p, hp‚ü© hq).filter_mono nhds_within_le_nhds).and h25 },
--     have e1 := cindex_eventually_eq_order hp,
--     have e2 := hp.locally_ne_zero h17,
--     have e3 := hq.locally_ne_zero h26,
--     have e4 := hU.eventually_mem hz‚ÇÄ,
--     simp only [eventually_nhds_within_iff, mem_compl_singleton_iff] at e2 e3,
--     simp only [eventually_nhds_iff_eventually_ClosedBall] at e2 e3 e4,
--     exact (e1.and (e3.and (e2.and e4))).exists' },
--   have h22 : ‚àÄ z ‚àà sphere z‚ÇÄ r, g z ‚â† 0,
--     from Œª z hz, h21 z (sphere_subset_ClosedBall hz) (ne_of_mem_sphere hz h7.lt.ne.symm),
--   have h18 : ‚àÄ Œµ, DifferentiableOn ‚ÑÇ (Œª z, g z + Œµ) U := Œª Œµ, hg.add_const Œµ,
--   have h19 : tendsto_locally_uniformly_on (Œª Œµ z, g z + Œµ) g (ùìù[‚â†] 0) U,
--     from tendsto_uniformly_on_add_const.tendsto_locally_uniformly_on,
--   have h9 : ‚àÄ·∂† Œµ in ùìù[‚â†] 0, cindex z‚ÇÄ r (Œª z, g z + Œµ) = 1,
--   { have h24 : p.order ‚â† 0 := by linarith,
--     have := hurwitz2 hU (eventually_of_forall h18) h19 h7 h20 h22 (by simp [h8, h24]),
--     simp only [eventually_nhds_within_iff] at this ‚ä¢,
--     filter_upwards [this] with Œµ h hŒµ,
--     obtain ‚ü®z, hz, hgz‚ü© := h hŒµ,
--     have e1 : z ‚â† z‚ÇÄ := by { rintro rfl; rw [hgz‚ÇÄ, zero_add] at hgz; exact hŒµ hgz },
--     have e2 : deriv (Œª z, g z + Œµ) z ‚â† 0 := by simpa using h14 z (ball_subset_ClosedBall hz) e1,
--     refine crucial hU h20 hz (h18 Œµ) hgz e2 (Œª w hw hwz, _),
--     contrapose! hwz,
--     exact hi (h20 hw) ((ball_subset_ClosedBall.trans h20) hz) (add_right_cancel (hwz.trans hgz.symm)) },
--   have h10 : tendsto (Œª Œµ, cindex z‚ÇÄ r (Œª z, g z + Œµ)) (ùìù[‚â†] 0) (ùìù (cindex z‚ÇÄ r g)),
--     from hurwitz2_2 hU (eventually_of_forall h18) h19 h7 (sphere_subset_ClosedBall.trans h20) h22,
--   rw [tendsto_nhds_unique (tendsto.congr' h9 h10) tendsto_const_nhds] at h8,
--   norm_cast at h8; linarith
-- end

-- lemma deriv_ne_zero_of_inj (hU : IsOpen U) (hf : DifferentiableOn ‚ÑÇ f U) (hi : inj_on f U)
--   (hz‚ÇÄ : z‚ÇÄ ‚àà U) :
--   deriv f z‚ÇÄ ‚â† 0 :=
-- begin
--   have : inj_on (Œª z, f z - f z‚ÇÄ) U := Œª z‚ÇÅ hz‚ÇÅ z‚ÇÇ hz‚ÇÇ h, hi hz‚ÇÅ hz‚ÇÇ (sub_left_inj.1 h),
--   simpa [deriv_sub_const] using deriv_ne_zero_of_inj_aux hU (hf.sub_const _) this hz‚ÇÄ (sub_self _)
-- end